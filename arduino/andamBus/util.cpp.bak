#include "util.h"
#include "Arduino.h"


Logger logger;


const ItemProperty* findPropertyByType(const ItemProperty props[], uint8_t size, AndamBusPropertyType type) {
    for (int i=0; i<size;i++) {
        if (props[i].type == type)
            return &props[i];
    }

    return nullptr;
}

void ntohHdr(AndamBusFrameHeader &hdr) {
    hdr.slaveAddress = ntohs(hdr.slaveAddress);
    hdr.counter = ntohs(hdr.counter);
    //hdr.crc32 = ntohl(hdr.crc32);
    hdr.payloadLength = ntohl(hdr.payloadLength);
    hdr.magicWord = ntohl(hdr.magicWord);
}

void htonHdr(AndamBusFrameHeader &hdr) {
    hdr.slaveAddress = htons(hdr.slaveAddress);
    hdr.counter = htons(hdr.counter);
//    hdr.crc32 = htonl(hdr.crc32);
    hdr.payloadLength = htonl(hdr.payloadLength);
    hdr.magicWord = htonl(hdr.magicWord);
}

void htonResp(AndamBusFrameResponse &resp) {
    if (resp.responseType == AndamBusResponseType::OK_DATA) {
        switch (resp.typeOkData.content) {
            case ResponseContent::NONE:
            case ResponseContent::RAWDATA:
            case ResponseContent::SECONDARY_BUS:
            case ResponseContent::VIRTUAL_DEVICE:
                break;
            case ResponseContent::PROPERTY:
                for (int i=0;i<resp.typeOkData.itemCount;i++)
                    resp.typeOkData.props[i].value = htonl(resp.typeOkData.props[i].value);
                break;
            case ResponseContent::VIRTUAL_PORT:
                for (int i=0;i<resp.typeOkData.itemCount;i++)
                    resp.typeOkData.portItems[i].value = htonl(resp.typeOkData.portItems[i].value);
                break;
            case ResponseContent::VALUES:
                for (int i=0;i<resp.typeOkData.itemCount;i++)
                    resp.typeOkData.portItems[i].value = htonl(resp.typeOkData.portValues[i].value);
                break;
            case ResponseContent::MIXED:
                VirtualDevice *vdl = resp.typeOkData.deviceItems;
                VirtualPort *vpl = reinterpret_cast<VirtualPort*>(vdl+resp.typeOkData.itemCount);

                for (int i=0;i<resp.typeOkData.itemCount2;i++)
                    vpl[i].value = htonl(vpl[i].value);

                ItemProperty *ipl = reinterpret_cast<ItemProperty*>(vpl+resp.typeOkData.itemCount2);

                for (int i=0;i<resp.typeOkData.itemCount3;i++)
                    ipl[i].value = htonl(ipl[i].value);
                break;

        }
    }
}

void ntohCmd(AndamBusFrameCommand &cmd) {
    for (int i=0;i<cmd.propertyCount;i++)
        cmd.props[i].value = ntohl(cmd.props[i].value);
}

uint8_t getItemSize(ResponseContent rc) {
    switch (rc) {
    case ResponseContent::PROPERTY:
        return sizeof(ItemProperty);
    case ResponseContent::NONE:
    case ResponseContent::RAWDATA:
    case ResponseContent::MIXED:
        return 0;
    case ResponseContent::SECONDARY_BUS:
        return sizeof(SecondaryBus);
    case ResponseContent::VIRTUAL_DEVICE:
        return sizeof(VirtualDevice);
    case ResponseContent::VIRTUAL_PORT:
        return sizeof(VirtualPort);
    case ResponseContent::VALUES:
        return sizeof(ItemValue);
    }
    return 0;
}

void hexdumpx(char *buf, int len) {
  char obuf[128];
  int pos = 0;
  LOG_U("----");
  for (int i=0;i<len;i++) {
    obuf[pos++] = ' ';
    obuf[pos++] = '0';
    obuf[pos++] = 'x';
    Serial.print(((unsigned int)buf[i])%0x100,HEX);
  }
  LOG_U("\n----------" );
  
}


Logger::Logger():hex(false) {
}

Logger& Logger::operator  << (uint32_t i) {
  if (hex)
    Serial.print(i,HEX);
  else
    Serial.print(i);
   
  return *this;  
}

Logger& Logger::operator  << (const iom &m) {
  hex = m==iom::hex;
}

Logger& Logger::operator << (const char *s) {
  Serial.print(s);
  return *this;
}

/*Logger& Logger::operator  << (const unsigned char *s) {
  Serial.print((const char*)s);
  return *this;

}*/

char cmdStringBuf[10];

const char* commandString(AndamBusCommand cmd) {

    const static char msgCmdNone[] PROGMEM = "NONE";
    const static char msgCmdMetadata[] PROGMEM = "METADATA";
    const static char msgCmdGetData[] PROGMEM = "GET_DATA";
    const static char msgCmdSetData[] PROGMEM = "SET_DATA";
    const static char msgCmdPersist[] PROGMEM = "PERSIST";
    const static char msgCmdDetectSlave[] PROGMEM = "DETECT_SLAVE";
    const static char msgCmdSecondaryBusCreate[] PROGMEM = "SECONDARY_BUS_CREATE";
    const static char msgCmdSecondaryBusDetect[] PROGMEM = "SECONDARY_BUS_DETECT";
    const static char msgCmdSecondaryBusCommand[] PROGMEM = "SECONDARY_BUS_COMMAND";
    const static char msgCmdSecondaryBusRemove[] PROGMEM = "SECONDARY_BUS_REMOVE";
    const static char msgCmdSecondaryBusList[] PROGMEM = "SECONDARY_BUS_LIST";
    const static char msgCmdValuesChanged[] PROGMEM = "VALUES_CHANGED";
    const static char msgCmdVirtualDeviceCreate[] PROGMEM = "VIRTUAL_DEVICE_CREATE";
    const static char msgCmdVirtualDeviceRemove[] PROGMEM = "VIRTUAL_DEVICE_REMOVE";
    const static char msgCmdVirtualDeviceChange[] PROGMEM = "VIRTUAL_DEVICE_CHANGE";
    const static char msgCmdVirtualDeviceList[] PROGMEM = "VIRTUAL_DEVICE_LIST";
    const static char msgCmdVirtualPortCreate[] PROGMEM = "VIRTUAL_PORT_CREATE";
    const static char msgCmdVirtualPortRemove[] PROGMEM = "VIRTUAL_PORT_REMOVE";
    const static char msgCmdVirtualPortSet[] PROGMEM = "VIRTUAL_PORT_SET_VALUE";
    const static char msgCmdVirtualPortList[] PROGMEM = "VIRTUAL_PORT_LIST";
    const static char msgCmdPropertyList[] PROGMEM = "PROPERTY_LIST";
    const static char msgCmdVirtualItemsCreated[] PROGMEM = "VIRTUAL_ITEMS_CREATED";
    const static char msgCmdVirtualItemsRemoved[] PROGMEM = "VIRTUAL_ITEMS_REMOVED";
  
    switch (cmd) {
        case AndamBusCommand::NONE: return msgCmdNone ;
        case AndamBusCommand::METADATA: return msgCmdMetadata;
        case AndamBusCommand::GET_DATA: return msgCmdGetData;
        case AndamBusCommand::SET_DATA: return msgCmdSetData;
        case AndamBusCommand::PERSIST: return msgCmdPersist;
        case AndamBusCommand::DETECT_SLAVE: return msgCmdDetectSlave;
        case AndamBusCommand::SECONDARY_BUS_CREATE: return msgCmdSecondaryBusCreate;
        case AndamBusCommand::SECONDARY_BUS_DETECT: return msgCmdSecondaryBusDetect;
        case AndamBusCommand::SECONDARY_BUS_COMMAND: return msgCmdSecondaryBusCommand;
        case AndamBusCommand::SECONDARY_BUS_REMOVE: return msgCmdSecondaryBusRemove;
        case AndamBusCommand::SECONDARY_BUS_LIST: return msgCmdSecondaryBusList;
        case AndamBusCommand::VALUES_CHANGED: return msgCmdValuesChanged;
        case AndamBusCommand::VIRTUAL_DEVICE_CREATE: return msgCmdVirtualDeviceCreate;
        case AndamBusCommand::VIRTUAL_DEVICE_REMOVE: return msgCmdVirtualDeviceRemove;
        case AndamBusCommand::VIRTUAL_DEVICE_CHANGE: return msgCmdVirtualDeviceChange;
        case AndamBusCommand::VIRTUAL_DEVICE_LIST: return msgCmdVirtualDeviceList;

        case AndamBusCommand::VIRTUAL_PORT_CREATE: return msgCmdVirtualPortCreate;
        case AndamBusCommand::VIRTUAL_PORT_REMOVE: return msgCmdVirtualPortRemove;
        case AndamBusCommand::VIRTUAL_PORT_SET_VALUE: return msgCmdVirtualPortSet;
        case AndamBusCommand::VIRTUAL_PORT_LIST: return msgCmdVirtualPortList;
        case AndamBusCommand::PROPERTY_LIST: return msgCmdPropertyList;
        case AndamBusCommand::VIRTUAL_ITEMS_CREATED: return msgCmdVirtualItemsCreated;
        case AndamBusCommand::VIRTUAL_ITEMS_REMOVED: return msgCmdVirtualItemsRemoved;

//            default:
    }
    return itoa((int)cmd, cmdStringBuf, 10);  
}
